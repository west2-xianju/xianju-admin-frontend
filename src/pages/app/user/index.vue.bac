<template>
  <div class="list-common-table">
    <t-form
      ref="form"
      :data="formData"
      :layout="inline"
      colon
      scroll-to-first-error="smooth"
      label-align="top"
      @reset="onReset"
      @submit="onSubmit"
    >
      <t-row justify="space-between" class="form-basic-item">
        <div>
          <t-button theme="primary">
            <template #icon><add-icon /></template>
            新建用户
          </t-button>
          <t-button theme="default" variant="outline"
            ><template #icon><refresh-icon /></template>
            刷新列表
          </t-button>
        </div>
        <div>
          <t-button theme="primary" type="submit">查询</t-button>
          <t-button theme="default" variant="outline" type="reset">重置</t-button>
        </div>
      </t-row>

      <div class="form-basic-item">
        <t-row class="row-gap" :gutter="[32, 24]">
          <t-col :span="4">
            <t-form-item label="用户ID" name="user_id">
              <t-input v-model="formData.user_id"></t-input>
            </t-form-item>
          </t-col>
          <t-col :span="4">
            <t-form-item label="用户名" name="username">
              <t-input v-model="formData.username"></t-input>
            </t-form-item>
          </t-col>
          <t-col :span="4">
            <t-form-item label="昵称" name="nickname">
              <t-input v-model="formData.nickname"></t-input>
            </t-form-item>
          </t-col>
        </t-row>
        <t-row class="row-gap" :gutter="[32, 24]">
          <t-col :span="4">
            <t-form-item label="邮箱" name="email">
              <t-input v-model="formData.email"></t-input>
            </t-form-item>
          </t-col>
          <t-col :span="2">
            <t-form-item label="真实姓名" name="realname">
              <t-input v-model="formData.realname"></t-input>
            </t-form-item>
          </t-col>
          <t-col :span="6">
            <t-form-item label="身份证号" name="id_number">
              <t-input v-model="formData.id_number"></t-input>
            </t-form-item>
          </t-col>
        </t-row>
      </div>

      <!-- <t-form-item label="封号状态" label-align="left" name="blocked">
        <t-switch v-model="formData.blocked" size="large" :label="['是', '否']"></t-switch>
      </t-form-item> -->
    </t-form>

    <div class="table-container">
      <t-table
        :data="data"
        :columns="COLUMNS"
        :row-key="rowKey"
        :vertical-align="verticalAlign"
        :hover="hover"
        :pagination="pagination"
        :loading="dataLoading"
        :header-affixed-top="headerAffixedTop"
        @page-change="rehandlePageChange"
        @change="rehandleChange"
      >
        <template #blocked="{ row }">
          <t-tag v-if="row.blocked === true" theme="danger" variant="light"> 已冻结 </t-tag>
          <t-tag v-if="row.blocked === false" theme="success" variant="light"> 正常 </t-tag>
        </template>

        <template #op="slotProps">
          <!-- <a class="t-button-link" @click="rehandleClickOp(slotProps)">管理</a> -->
          <!-- <a class="t-button-link" @click="handleClickDelete(slotProps)">删除</a> -->
          <t-button shape="circle" variant="text"><edit-icon slot="icon" /></t-button>
          <t-popconfirm
            destroy-on-close
            show-arrow
            placement="right"
            theme="danger"
            content="确认删除吗"
            @visible-change="popMessage"
          >
            <!-- <t-button @click="handleClickDelete(slotProps)">删除</t-button> -->
            <t-button shape="circle" variant="text"><delete-icon slot="icon" /></t-button>
            <!-- <t-button>删除</t-button> -->
          </t-popconfirm>
        </template>
      </t-table>
      <!-- <t-dialog
        v-model:visible="confirmVisible"
        header="确认删除当前所选合同？"
        :body="confirmBody"
        :on-cancel="onCancel"
        @confirm="onConfirmDelete"
      /> -->
    </div>
  </div>
</template>
<script setup lang="ts">
import { AddIcon, DeleteIcon, EditIcon, RefreshIcon } from 'tdesign-icons-vue-next';
import { MessagePlugin, PageInfo, PrimaryTableCol, TableRowData } from 'tdesign-vue-next';
import { computed, onMounted, reactive, ref } from 'vue';

import { userList } from '@/api/app/models/userModels';
// import { getList } from '@/api/list';
import { deleteUser, getUserList } from '@/api/app/user';
// import Trend from '@/components/trend/index.vue';
import { prefix } from '@/config/global';
import { useSettingStore } from '@/store';

const store = useSettingStore();

const COLUMNS: PrimaryTableCol<TableRowData>[] = [
  {
    title: '用户ID',
    sorter: true,
    fixed: 'left',
    width: 100,
    ellipsis: true,
    align: 'left',
    colKey: 'uid',
  },
  {
    title: '用户名',
    sorter: true,
    width: 280,
    ellipsis: true,
    align: 'left',
    colKey: 'username',
  },
  // {
  //   title: '头像',
  //   width: 280,
  //   ellipsis: true,
  //   align: 'left',
  //   colKey: 'profile',
  // },
  {
    title: '是否封号',
    width: 160,
    colKey: 'blocked',
  },
  {
    title: '昵称',
    width: 160,
    ellipsis: true,
    align: 'left',
    colKey: 'nickname',
  },
  {
    title: '邮箱',
    width: 160,
    ellipsis: true,
    align: 'left',
    colKey: 'email',
  },
  {
    title: '真实姓名',
    width: 160,
    ellipsis: true,
    align: 'left',
    colKey: 'realname',
  },
  {
    title: '身份证号',
    width: 160,
    ellipsis: true,
    align: 'left',
    colKey: 'id_number',
  },
  {
    title: '注册时间',
    sorter: true,
    width: 160,
    ellipsis: true,
    align: 'left',
    colKey: 'register_time',
  },
  // {
  //   title: '合同名称',
  //   fixed: 'left',
  //   width: 280,
  //   ellipsis: true,
  //   align: 'left',
  //   colKey: 'name',
  // },
  // { title: '合同状态', colKey: 'status', width: 160 },
  // {
  //   title: '合同编号',
  //   width: 160,
  //   ellipsis: true,
  //   colKey: 'no',
  // },
  // {
  //   title: '合同类型',
  //   width: 160,
  //   ellipsis: true,
  //   colKey: 'contractType',
  // },
  // {
  //   title: '合同收付类型',
  //   width: 160,
  //   ellipsis: true,
  //   colKey: 'paymentType',
  // },
  // {
  //   title: '合同金额 (元)',
  //   width: 160,
  //   ellipsis: true,
  //   colKey: 'amount',
  // },
  {
    align: 'left',
    fixed: 'right',
    width: 160,
    colKey: 'op',
    title: '操作',
  },
];
const pagination = ref({
  defaultPageSize: 20,
  pageSizeOptions: [10, 20],
  defaultCurrent: 1,
  total: 0,
});
const searchForm = {
  user_id: '',
  username: '',
  nickname: '',
  email: '',
  blocked: '',
  realname: '',
  id_number: '',
  page: pagination.value.defaultCurrent,
  limit: pagination.value.defaultPageSize,
};

const formData = reactive({ ...searchForm });
const rowKey = 'uid';
const verticalAlign = 'top' as const;
const hover = true;

const confirmVisible = ref(false);

const data = ref([]);
const result = ref();

const dataLoading = ref(false);
const fetchData = async () => {
  dataLoading.value = true;
  try {
    data.value = await getUserList(formData).then((res) => {
      console.log('fetch:', res);
      pagination.value = {
        ...pagination.value,
        total: res.count,
      };
      return res.users;
    });
    // console.log(data);
  } catch (e) {
    console.log(e);
  } finally {
    dataLoading.value = false;
  }
};

const deleteIdx = ref(-1);
const confirmBody = computed(() => {
  if (deleteIdx.value > -1) {
    const { name } = data.value[deleteIdx.value];
    return `删除后，${name}的所有合同信息将被清空，且无法恢复`;
  }
  return '';
});

const resetIdx = () => {
  deleteIdx.value = -1;
};

const onConfirmDelete = () => {
  // result.value = await deleteUser
  // 真实业务请发起请求
  data.value.splice(deleteIdx.value, 1);
  pagination.value.total = data.value.length;
  confirmVisible.value = false;
  MessagePlugin.success('删除成功');
  resetIdx();
};

// const onCancel = () => {
//   resetIdx();
// };

onMounted(() => {
  fetchData();
});

const visible = ref(false);

const popMessage = (val, context = {}) => {
  if (context && context.trigger === 'confirm') {
    MessagePlugin.success('hi');
    fetchData();
    // const msg = MessagePlugin.success('hi');
    // const timer = setTimeout(() => {
    //   MessagePlugin.close(msg);
    //   MessagePlugin.success('提交成功！');
    //   visible.value = false;
    //   clearTimeout(timer);
    // }, 1000);
  } else {
    visible.value = val;
  }
};

// const handleClickDelete = ({ row }) => {
//   deleteIdx.value = row.rowIndex;
//   confirmVisible.value = true;
// };
const onReset = (val) => {
  console.log(formData.value);
  console.log(val);
};

const onSubmit = async ({ validateResult, firstError }) => {
  console.log(formData);
  MessagePlugin.info('查询中...');

  data.value = await getUserList(formData).then((res) => {
    // console.log(res);

    pagination.value = {
      ...pagination.value,
      total: res.count,
    };
    return res.users;
  });
  if (validateResult === true) {
    MessagePlugin.success('查询成功');
  } else {
    console.log('Validate Errors: ', firstError, validateResult);
    MessagePlugin.warning(firstError);
  }
};

const rehandlePageChange = (pageInfo: PageInfo, newDataSource: TableRowData[]) => {
  formData.page = pageInfo.current;
  formData.limit = pageInfo.pageSize;
  console.log(formData);
  fetchData();
  console.log('分页变化', pageInfo, newDataSource);
};
const rehandleChange = (changeParams, triggerAndData) => {
  console.log('统一Change', changeParams, triggerAndData);
};
const rehandleClickOp = ({ text, row }) => {
  console.log(text, row);
};

const headerAffixedTop = computed(
  () =>
    ({
      offsetTop: store.isUseTabsRouter ? 48 : 0,
      container: `.${prefix}-layout`,
    } as any), // TO BE FIXED
);
</script>

<style lang="less" scoped>
.list-common-table {
  background-color: var(--td-bg-color-container);
  padding: var(--td-comp-paddingTB-xxl) var(--td-comp-paddingLR-xxl);
  border-radius: var(--td-radius-medium);

  .table-container {
    margin-top: var(--td-comp-margin-xxl);
  }
}

.form-item-content {
  width: 100%;
}

.operation-container {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  .expand {
    .t-button__text {
      display: flex;
      align-items: center;
    }
  }
}

.payment-col {
  display: flex;

  .trend-container {
    display: flex;
    align-items: center;
    margin-left: var(--td-comp-margin-s);
  }
}
</style>
